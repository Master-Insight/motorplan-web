---
import Layout from "@/layouts/Layout.astro";
import Frame from "@/components/Frame.astro";
import config from "@config";
import SeccionA from "@/sections/mediosPago/SeccionA.astro";
import SeccionB from "@/sections/mediosPago/SeccionB.astro";
import SeccionC from "@/sections/mediosPago/SeccionC.astro";
import SeccionD from "@/sections/mediosPago/SeccionD.astro";
import RadioButton from "@/sections/mediosPago/RadioButton.astro";

const { mediosPago } = config;
const opcionesMedios = [
  "Banco Santander",
  "Banco ICBC",
  "Banco Provincia de Neuquén",
  "Mercado Pago",
];
---

<Layout title="Medios de Pago - Motorplan">
  <Frame>
    <section class="py-16 container mx-auto px-4">
      <!-- Aviso inicial -->
      <div class="mb-12 text-center">
        <h2 class="text-3xl font-bold text-gray-800 mb-4">Medios de Pago</h2>
        <p class="text-lg text-gray-700">
          Motorplan S.A. de Capitalización y ahorro no cuenta con <strong
            >COBRADORES A DOMICILIO</strong
          >.
        </p>
      </div>

      <!-- Botones tipo radio adornados -->
      <div class="mb-8 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4">
        <RadioButton
          id="opcionA"
          name="seccion"
          value="A"
          label="Transferencias y depósitos bancarios"
          checked
        />
        <RadioButton
          id="opcionB"
          name="seccion"
          value="B"
          label="Solicita Link de Pago"
        />
        <RadioButton
          id="opcionC"
          name="seccion"
          value="C"
          label="Solicita adhesión en débito automático en tarjeta de crédito"
        />
        <RadioButton
          id="opcionD"
          name="seccion"
          value="D"
          label="Informa tu pago"
        />
      </div>

      <!-- Sección A: Transferencias y depósitos bancarios -->
      <SeccionA mediosPago={mediosPago} />

      <!-- Sección B: Solicita Link de Pago -->
      <SeccionB opcionesMedios={opcionesMedios} />

      <!-- Sección C: Solicita adhesión en débito automático en tarjeta de crédito -->
      <SeccionC opcionesMedios={opcionesMedios} />

      <!-- Sección D: Informa tu pago -->
      <SeccionD opcionesMedios={opcionesMedios} />
    </section>

    <!-- Modal "Enviando" -->
    <div
      id="modal"
      class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden"
    >
      <div class="bg-white p-6 rounded-lg shadow-lg text-center">
        <p class="text-md font-medium">Enviando...</p>
      </div>
    </div>

    <script>
      // Se obtienen todos los radio buttons y las secciones correspondientes
      const radios = document.querySelectorAll('input[name="seccion"]');
      const sections: Record<string, HTMLElement | null> = {
        A: document.getElementById("seccionA"),
        B: document.getElementById("seccionB"),
        C: document.getElementById("seccionC"),
        D: document.getElementById("seccionD"),
      };

      radios.forEach((radio) => {
        if (radio instanceof HTMLInputElement) {
          radio.addEventListener("change", () => {
            Object.values(sections).forEach((section) => {
              section?.classList.add("hidden"); // Evita error si es null
            });

            const selectedSection = sections[radio.value]; // Obtiene la sección correspondiente
            selectedSection?.classList.remove("hidden"); // Verifica que no sea null antes de quitar "hidden"
          });
        }
      });
    </script>

    <!-- Script Enviar Formulario B -->
    <script is:inline>
      async function handleSubmitB(event) {
        event.preventDefault(); // Evita el comportamiento por defecto del formulario

        const form = document.getElementById("formBPayForm");
        const modal = document.getElementById("modal");

        // Mostrar el modal de "Enviando..."
        modal.classList.remove("hidden");

        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());

        try {
          const response = await fetch("/api/payB.json", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(data),
          });
          if (response.ok) {
            // Redirigir a la página de "gracias por tu contacto"
            window.location.href = "/graciasportucontacto";
          } else {
            alert("Error al enviar los datos");
          }
        } catch (error) {
          alert("Ocurrió un error inesperado: " + error.message);
        } finally {
          // Ocultar el modal de "Enviando..."
          modal.classList.add("hidden");
        }
      }
    </script>

    <!-- Script Enviar Formulario C -->
    <script is:inline>
      async function handleSubmitC(event) {
        event.preventDefault(); // Evita el comportamiento por defecto del formulario

        const form = document.getElementById("formCPayForm");
        const modal = document.getElementById("modal");

        // Mostrar el modal de "Enviando..."
        modal.classList.remove("hidden");

        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());

        try {
          const response = await fetch("/api/payC.json", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(data),
          });
          if (response.ok) {
            // Redirigir a la página de "gracias por tu contacto"
            window.location.href = "/graciasportucontacto";
          } else {
            alert("Error al enviar los datos");
          }
        } catch (error) {
          alert("Ocurrió un error inesperado: " + error.message);
        } finally {
          // Ocultar el modal de "Enviando..."
          modal.classList.add("hidden");
        }
      }
    </script>

    <!-- Script Enviar Formulario D -->
    <script is:inline>
      async function handleSubmitD(event) {
        event.preventDefault(); // Evita el comportamiento por defecto del formulario

        const form = document.getElementById("formDPayForm");
        const modal = document.getElementById("modal");

        // Mostrar el modal de "Enviando..."
        modal.classList.remove("hidden");

        // Validaciones

        // Obtener los valores del formulario
        const nombre = form.nombreD.value.trim();
        const dni = form.dniD.value.trim();
        const monto = parseFloat(form.montoD.value);
        const fecha = form.fechaD.value;
        const medio = form.medioD.value;
        const file = form.comprobante.files[0];

        // Validar campos requeridos
        if (!nombre || !dni || !monto || !fecha || !medio || !file) {
          alert("Todos los campos son obligatorios.");
          modal.classList.add("hidden");
          return;
        }

        // Validar DNI (7 u 8 dígitos)
        const dniRegex = /^\d{7,8}$/;
        if (!dniRegex.test(dni)) {
          alert("El DNI debe tener entre 7 y 8 dígitos.");
          modal.classList.add("hidden");
          return;
        }

        // Validar fecha
        const fechaActual = new Date();
        const fechaIngresada = new Date(fecha);
        const seisMesesAtras = new Date();
        seisMesesAtras.setMonth(fechaActual.getMonth() - 6);

        if (fechaIngresada > fechaActual) {
          alert("La fecha no puede ser mayor a la fecha actual.");
          modal.classList.add("hidden");
          return;
        }

        if (fechaIngresada < seisMesesAtras) {
          alert(
            "La fecha no puede ser menor a 6 meses antes de la fecha actual.",
          );
          modal.classList.add("hidden");
          return;
        }

        // Validar monto
        if (monto <= 49) {
          alert("El monto debe ser valido.");
          modal.classList.add("hidden");
          return;
        }

        // Validar archivo
        const tiposPermitidos = [
          "application/pdf",
          "image/jpeg",
          "image/jpg",
          "image/png",
          "image/bmp",
        ];
        const tamanoMaximo = 25 * 1024 * 1024; // 25 MB

        if (!tiposPermitidos.includes(file.type)) {
          alert("Solo se permiten archivos PDF o imágenes (JPEG, PNG).");
          modal.classList.add("hidden");
          return;
        }

        if (file.size > tamanoMaximo) {
          alert("El archivo no puede superar los 25 MB.");
          modal.classList.add("hidden");
          return;
        }

        // si pasa validaciones se sigue a la API
        const formData = new FormData(form); // se envia como formData y no como JSON

        try {
          const response = await fetch("/api/payD.json", {
            method: "POST",
            body: formData,
          });

          if (response.ok) {
            // Redirigir a la página de "gracias por tu contacto"
            window.location.href = "/graciasportucontacto";
          } else {
            alert("Error al enviar los datos");
          }
        } catch (error) {
          alert("Ocurrió un error inesperado: " + error.message);
        } finally {
          // Ocultar el modal de "Enviando..."
          modal.classList.add("hidden");
        }
      }
    </script>

    <style>
      input[type="radio"]:checked + label {
        background-color: #3182ce;
        color: #fff;
      }
    </style>
  </Frame>
</Layout>
